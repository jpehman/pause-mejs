/*
 *@summary JavaScript setTimeout and setInterval utility that allows pausing, resuming, stopping, and starting a setTimeout
 *@license {@link https://github.com/jpehman/pause-mejs/blob/master/LICENSE}
 *@author Jonathan Ehman
 *@typedef object
 *@example
 * const pauseMe = require("pause-me");
 * 
 * const myTimeout = pauseMe(() => {
 *  console.log("timed out!");
 * }, 5000);
 * @param {function} callback - optional - function or lambda that you want executed after duration. If you do not include a callback, what's the point?
 * @param {number} duration - required - Milliseconds to set the timeout to. Throws an error if not a number or not included 
 * @param {bool} repeating - optional - When true the timeout is treated as an interval 
 */
 var pauseMe=function(d,c,k){var g=null,e=null,b=0,h=function(){},a=null;d=d||function(){};if("number"!==typeof c)throw new TypeError("duration must be a number","function timeout",10);if(0>c)throw Error("duration must be 0 or greater","function timeout",13);b=c;var f=function(){a=setTimeout(d,b);g=new Date};k&&(h=d,d=function(){h();b=c;clearTimeout(a);a=null;f()});f();return{start:function(){null===a&&(b=c,f())},pause:function(){null!==a&&(e=new Date,clearTimeout(a),a=null)},resume:function(){null===
   a&&null!==e&&(b-=e.getTime()-g.getTime(),e=null,b&&f())},stop:function(){null!==a&&(b=c,e=null,clearTimeout(a),a=null)},timer:function(){return a}}};"undefined"!==typeof module&&module.exports&&(module.exports=pauseMe);