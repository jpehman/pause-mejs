/*
 *@summary JavaScript setTimeout and setInterval utility that allows pausing, resuming, stopping, and starting a setTimeout
 *@license {@link https://github.com/jpehman/pause-mejs/blob/master/LICENSE}
 *@author Jonathan Ehman
 *@typedef object
 *@example
 * const pauseMe = require("pause-me");
 * 
 * const myTimeout = pauseMe(() => {
 *  console.log("timed out!");
 * }, 5000);
 * @param {function} callback - optional - function or lambda that you want executed after duration. If you do not include a callback, what's the point?
 * @param {number} duration - required - Milliseconds to set the timeout to. Throws an error if not a number or not included 
 * @param {bool} repeating - optional - When true the timeout is treated as an interval 
 */
function pauseMe(n,u,t){"use strict"
var e=null,o=null,r=0,i=n,l=null
if(n=n||function(){},"number"!=typeof u)throw new TypeError("duration must be a number","function timeout",10)
if(u<0)throw new Error("duration must be 0 or greater","fuction timeout",13)
r=u
var f=function(){l=setTimeout(n,r),e=new Date},c=function(){clearTimeout(l),l=null},a=function(){null!==l&&(o=new Date,c())},m=function(){null===l&&null!==o&&(r-=o.getTime()-e.getTime(),o=null,r&&f())},s=function(){null!==l&&(r=u,o=null,c())}
return t&&(n=function(){i(),r=u,c(),f()}),f(),{start:function(){null===l&&(r=u,f())},pause:a,resume:m,stop:s,timer:function(){return l}}}module.exports=pauseMe
